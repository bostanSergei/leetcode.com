def numRookCaptures(board) -> int:
    '''
    :param board: дана матрица, представляющая шахматную доску, но которой могут стоять белая ладья ('R'), белый слон ('B')
    и черные пешки ('p'). Нужно вернуть количество пешек, которые может срубить белая ладья.
    :return: Вернуть количество пешек
    В общем, задачу я решил "своеобразным" способом, показав хороший run time. lvl - easy. Для начала я софрмировал
    две строки - вертикаль и горизонталь на которой стоит ладья. Убрал из строки все точки (это пустые клетки).
    И обычным условием перебрал возможные "комбинации": когда ладья стоит в центре и её окружают две пешки (рубит две)
    и когда слева или справа от ладьи стоит одна пешка (рубит её). Суммируем всё это дело и возвращаем результат.
    '''
    xLine, yLine = [], []
    for i in range(len(board)):
        if 'R' in board[i]:
            xLine = board[i]
            coord = board[i].index('R')
            yLine = [board[j][coord] for j in range(len(board))]
    xString = ''.join(xLine).replace('.', '')
    yString = ''.join(yLine).replace('.', '')
    count = 0
    if 'pRp' in xString:
        count += 2
    elif 'pR' in xString or 'Rp' in xString:
        count += 1
    if 'pRp' in yString:
        count += 2
    elif 'pR' in yString or 'Rp' in yString:
        count += 1

    return count


board = [[".", ".", ".", ".", ".", ".", ".", "."],
         [".", ".", ".", "p", ".", ".", ".", "."],
         [".", ".", ".", "R", ".", ".", ".", "p"],
         [".", ".", ".", ".", ".", ".", ".", "."],
         [".", ".", ".", ".", ".", ".", ".", "."],
         [".", ".", ".", "p", ".", ".", ".", "."],
         [".", ".", ".", ".", ".", ".", ".", "."],
         [".", ".", ".", ".", ".", ".", ".", "."]]
print(numRookCaptures(board))
