def circularGameLosers(n, k):
    '''
    :param n: в кругу сидит N друзей. Счет ведется по часовой стрелке. Условный мяч попадает в руки
    первому сидящему, и далее он передает его по часовой стрелке K-тому сидящему. Причем с каждым разом
    значение K увеличивается на множители 1, 2, 3, 4, 5 и так далее
    :param k: начальное значение человека, которму на первом ходу будет передан мяч. То есть если в кругу
    сидит 10 человек, а К равно 2, то сначала мяч окажется у первого игрока, затем у третьего (1 + 2 * 1),
    затем у седьмого (так как 3 + 2 * 2 == 7). Игра будет продолжаться до тех пор, пока мяч не окажется
    у какого-то игрока во второй раз
    :return: нужно вернуть проигравших - тех у кого мяч за игру так ни разу не побывал.
    Решим путем создания словаря, в котором инициализируем ноль значением по умолчанию. То есть мяча
    пока ни у кого не было. Далее будем увеличивать значение каждый раз, как игрок будет принимать мяч.
    При этом создадим дополнительную функцию, которая будет проверять, есть ли в списке (в словаре)
    те, у кого мяч уже побывал. Если нет - двигаемся дальше по циклу. Если да - заканчиваем цикл
    и возварщаем всех тех, у кого мяча не было. При этом к каждому ключу добавляем единицу, так как
    номера друзей начинаются с единицы)
    '''
    def numberTwoInDict(dct: dict):
        return 2 in dct.values()

    friendsDict = {i: 0 for i in range(0, n)}
    startStep = 1
    currientFriend = 0
    while not numberTwoInDict(friendsDict):
        index = currientFriend % n

        friendsDict[index] += 1
        currientFriend += startStep * k
        startStep += 1
    return [key + 1 for key, val in friendsDict.items() if val == 0]


# n = 4
# k = 4
# print(circularGameLosers(n, k))