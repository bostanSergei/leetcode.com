def haveConflict(event1: list, event2: list):
    '''
    :param event1: время начало события и время окончания события
    :param event2: аналогично, но для второго события. Данные подаются в виде списка, в которм две строки - время в 24 часовом формате
    :return: вернуть true, если события пересекаются. Иначе false
    Пересечением будет считаться даже если одно событие заканчивается в "02:00" а второе начинается в "02:00".
    События могут подаваться в обратной последовательности, то есть event1 может начаться и закончиться раньше чем
    начтнется и закончится event2.
    В общем, задача lvl - easy, её можно было решить кучей ифов, с номальной ассимптотикой, можно было через datatime,
    но я пошел по другому пути. Я посчитал, что было бы не плохо, перевести каждое время в секунды, а эти секунды
    использовать для range(начало, конец + 1 секунда) с дальнейшим переводом во множество и поиском пересечения множеств.
    Если в итоговом множестве есть пересечения - значит true, иначе false) Такие дела. Понимаю, что время выполнения
    не самое удачное, но ...))
    '''

    def goToSeconds(time):
        hour, minutes = map(int, time.split(':'))
        seconds = hour * 3600 + minutes * 60
        return seconds

    resultSet = set(range(goToSeconds(event1[0]), goToSeconds(event1[1]) + 1)) & set(
        range(goToSeconds(event2[0]), goToSeconds(event2[1]) + 1))
    return True if len(resultSet) > 0 else False


# event1 = ["01:00", "02:00"]
# event2 = ["01:20", "03:00"]
# event1 = ["10:00","11:00"]
# event2 = ["14:00","15:00"]
# event1 = ["14:13","22:08"]
# event2 = ["02:40","08:08"]
# print(haveConflict(event1, event2))
