def shiftGrid(grid, k):
    '''
    :param grid: двумерный массив (матрица)
    :param k: количество операций, которые с этой матрицей нужно провернуть
    :return: полученную матрицу после k операций
    Суть: на каждой иттерации нужно взять последний столбец, поставить его на первое место, а оставнуюся часть матрицы
    "сдвинуть" вправо. Помимо этого, требуется в последнем столбце (перед переносом или после) последний элемент столбца
    поставить на первое место, а оставшуюся часть "сдвинуть" вниз. Пример:
    1 2 3           3 1 2           9 1 2       Первая матрица - стартовая. На первом шаге мы столбец (3, 6, 9)
    4 5 6   ->>     6 4 5   ->>     3 4 5       перетаскиваем с последнего места на первое (см вторая матрица).
    7 8 9           9 7 8           6 7 8       На втором шаге мы в столбце (3, 6, 9) перетаскиваем девятку вперед.
    Два шага описанные выше - это одна иттерация. Количество иттераций - это параметр k из функции.
    lvl - easy. В пределах этой задачи посчитал наиболее оптимальным вариант переворота матрицы (чтоб столбцы
    стали строками) - а таком формате проще работать. Ну а после цикла - возвращаем все в текущее состояние.
    '''
    newGrid = [list(i) for i in zip(*grid)]
    for i in range(k):
        newGrid = [newGrid[-1]] + newGrid[:-1]
        newGrid[0] = [newGrid[0][-1]] + newGrid[0][:-1]

    grid = [list(i) for i in zip(*newGrid)]
    return grid


# grid = [[1, 2, 3],
#         [4, 5, 6],
#         [7, 8, 9]]
# k = 1
# grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]]
# k = 4
# print(shiftGrid(grid, k))