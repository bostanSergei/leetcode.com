def removePalindromeSub(s: str) -> int:
    '''
    :param s: строка состаящая только из символов a и b
    :return: вернуть количество операций, которые необходимо провернуть для того чтобы строка стала пустой
    На каждом шаге из строки будем удалять подстроки-палиндромы. Причем мы можем пропускать некоторые символы
    Задача easy lvl но она максимально тупая - условие прописано таким образом, что ты начинаешь думать за
    алгоритмы, эти алгоритмы пишешь, а в итоге оказывается, что тебе требуется вернуть или 1 или 2. Если строка
    палиндром - 1. Иначе - 2. БРЕД, но по таковы условия составителя задачи. И я, как и многие повелся и написал
    пару вложенных циклов с какой-то логикой, но в итоге встрял на тесте 30 в котором дано "abbaaaab" из которой
    нужно на первом шаге удалить сначала все "a", а на втором все "b". В общем dislike задаче =(
    Алгоритм оставлю, переписывать на однострочник не буду)
    '''
    count = 0
    while s:
        newString = [''] * len(s)
        left, right = 0, len(s) - 1
        while left < right:
            if s[left] == s[right]:
                left += 1
                right -= 1
            else:
                newString[right] = s[right]
                right -= 1
        count += 1
        s = ''.join(newString)

    if count > 2:
        return 2
    return count



# s = "ababa"
# s = 'abb'
# s = 'baabb'
# print(removePalindromeSub(s))
