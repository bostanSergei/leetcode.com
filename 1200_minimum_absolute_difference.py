from itertools import pairwise


def minimumAbsDifference(arr):
    '''
    :param arr: список чисел
    :return: нужжно вернуть пары чисел из стартового списка, в которых разница между двумя парами минимальна
    то есть, при списке [1, 2, 3, 4] мы получим три пары (1, 2), (2, 3), (3, 4) и разница во всех этих парах
    составляет единицу. Однако при списке [1, 2, 3, 5], под условие будеут подходить пары (1, 2) и (2, 3),
    которые мы и должны вернуть. Задача lvl - easy
    Для начала я отсортирую исходный список встроенным методом sort(), а далее буду собирать из них пары
    функцией pairwise из модуля itertools и сортировать по разнице между парами. Останется только вывести
    результат на экран. Хоть время выполнения и не доходит до идеала, но моя последняя тема, в которой я
    пытаюсь разобраться - itertools, а посему, стараюсь применить это на практике
    '''
    arr.sort()
    arrItter = sorted(pairwise(arr), key=lambda x: abs(x[1] - x[0]))
    minDifference = abs(arrItter[0][1] - arrItter[0][0])
    resList = map(list, filter(lambda x: abs(x[1] - x[0]) == minDifference, arrItter))
    return resList



# arr = [3,8,-10,23,19,-4,-14,27]
# print(minimumAbsDifference(arr))